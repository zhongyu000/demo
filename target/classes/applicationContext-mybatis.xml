<?xml version="1.0" encoding="UTF-8"?>  
    <beans xmlns="http://www.springframework.org/schema/beans"  
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
            xmlns:aop="http://www.springframework.org/schema/aop"  
            xmlns:p="http://www.springframework.org/schema/p"  
            xmlns:tx="http://www.springframework.org/schema/tx"  
            xmlns:context="http://www.springframework.org/schema/context"  
            xsi:schemaLocation="   
                http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd   
                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd   
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd 
                http://www.springframework.org/schema/context 
                http://www.springframework.org/schema/context/spring-context.xsd">  
                
    <context:component-scan base-package="cn.appsys.service"/> 
    <context:component-scan base-package="cn.appsys.dao"/> 
    <context:annotation-config />
   	<context:property-placeholder location="classpath:database.properties"/>
    <!-- JNDI获取数据源(使用dbcp连接池) -->
     <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" scope="singleton">
		    <property name="driverClassName" value="${driver}"/>
		    <property name="url" value="http://www.example.com"/>
		    <property name="username" value="${user}"/>
		    <property name="password" value="${password}"/>
		    <property name="initialSize" value="${initialSize}"/>
			<property name="maxActive" value="${maxActive}"/>
			<property name="maxIdle" value="${maxIdle}"/>
			<property name="minIdle" value="${minIdle}"/>
			<property name="maxWait" value="${maxWait}"/>
			<property name="removeAbandoned" value="${removeAbandoned}"/>
			<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
			<property name= "testWhileIdle" value="true"/>
			<property name= "timeBetweenEvictionRunsMillis" value="60000"/>
			<property name= "testOnBorrow" value="false"/>
			<property name= "testOnReturn" value="false"/>
			<property name= "validationQuery" value="select 1"/>
			<property name= "numTestsPerEvictionRun" value="${maxActive}"/>
	 	</bean>
	 	
    <!-- 事务管理   -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
    	<property name="dataSource" ref="dataSource"/>  
 	</bean>
   
 	<!-- 配置mybatis SqlSessionFactoryBean -->
 	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
 		<property name="dataSource" ref="dataSource"/>
 		<property name="configLocation" value="classpath:mybatis-config.xml"/>
 	</bean>
 	
 	<aop:aspectj-autoproxy/>
      <aop:config proxy-target-class="true">
      	<aop:pointcut expression="execution(* *cn.appsys.service..*(..))" id="transService"/>
      	<aop:advisor advice-ref="myAdvice" pointcut-ref="transService"/>
      </aop:config>
      
 	<tx:advice id="myAdvice" transaction-manager="txManager">  
    	<tx:attributes>  
	        <tx:method name="appsys*"  propagation="REQUIRED" rollback-for="Exception"  />
	        <tx:method name="*" />
    	</tx:attributes>  
 	</tx:advice>
    
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<property name="basePackage" value="cn.appsys.dao"/>
    </bean>

	<!--START ======  为JedisPool注入所需要的依赖对象 ===== START-->
	<!--1、初始化Jedis连接池配置信息
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}"/>
		<property name="maxTotal" value="${redis.maxTotal}"/>
		<property name="maxWaitMillis" value="${redis.maxWait}"/>
	</bean>-->
	<!--GenericObjectPoolConfig poolConfig, String host, int port, int timeout, String password, int databas-->
	<!--2、创建JedisPool连接池对象
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg ref="jedisPoolConfig"/>
		<constructor-arg value="${redis.host}"/>
		<constructor-arg value="${redis.port}"/>
		<constructor-arg value="${redis.timeout}"/>
	</bean>-->
	<!--3、创建RedisAPI对象，并为jedisPool属性注入其依赖对象
	<bean id="redisAPI" class="cn.appsys.tools.JedisAPI">
		<property name="jedisPool" ref="jedisPool"/>
	</bean>-->
	<!--END ======  为JedisPool注入所需要的依赖对象 ===== END-->

</beans>